/*MiniCpp.l:                                            HDO, 2006-2015
  ------
  Description of the lexical structure for MiniCpp.
====================================================================*/

%{

  #include "MiniCpp.tab.h" /*generated by yacc/bison from MiniCpp.y
                          if option -d is used, defines NUMBER      */

%}

%%

[ \t\n]+   { ; }          /*ignore white space: blanks and tabs and newline      */

[0-9]+                 { return NUMBER; }
"/""/".*\newline         { ; } /* ignore comments */
const                  { return CONST; }
false                  { return FALSE; }
true                   { return TRUE; }
nullptr                { return NULLPTR; }
bool                   { return BOOL; }
if                     { return IF; }
else                   { return ELSE; }
while                  { return WHILE; }
break                  { return BREAK; }
cin                    { return CIN; }
cout                   { return COUT; }
\"([^\\\"]|\\.)*\"                 { return STRING; }
endl                   { return ENDL; }
delete                 { return DELETE; }
return                 { return RETURN; }
new                    { return NEW; }
void                   { return VOID; }
int                    { return INT; }
[A-Za-z_][A-Za-z0-9\_]* { yylval.iIdent = strdup(yytext); return IDENT; }
">="                      { return SMALLEREQUALS; }
"<="                      { return GREATEREQUALS; }
">>"                      { return CINSY; }
"<<"                      { return COUTSY; }
"+="                      { return PLUSASG; }
"-="                      { return MINUSASG; }
"*="                      { return TIMESASG; }
"/="                      { return DIVIDEASG; }
"%="                      { return MODASG; }
"=="                      { return EQUALS; }
"!="                      { return NOTEQUALS; }
"++"                      { return PLUSPLUS; }
"--"                      { return MINUSMINUS; }
"||"                      { return OR; }
"&&"                      { return AND; }

.        { return yytext[0]; } /*return all other chars 
                                 as tokens: '+', '-', ...           */

%%

int yywrap() {
  return 1; /*on end of input: no further files to scan             */
} /*yywrap*/

/* End of Calc.l
====================================================================*/