Coco-2 SG (source: MiniC.atg)

    1| COMPILER MiniC
    2| 
    3| SEM<<private static int numStats = 0;>>
    4| 
    5| CHARACTER SETS
    6|   digit      = '0' .. '9'.
    7|   whiteSpace = CHR(9) + EOL IGNORE. /*' ' ignored by default*/
    8|   letter     = 'a' .. 'z' + 'A' .. 'Z' + '_'.
    9| 
   10| COMMENTS
   11|   FROM '/*' TO '*/' .
   12|   FROM '//' TO EOL .
   13| 
   14| KEYWORDS
   15|   'void'. 'main'. 'int'. 'scanf'. 'printf'. 'if'. 'else'.
   16| 
   17| TOKENS                      
   18|   '+'.  '-'.  '*'.  '/'.  '('.  ')'. 
   19|   '{'. '}'.
   20|   ','. ';'. '='. 
   21| 
   22| TOKEN CLASSES           
   23|   number<<out int n>> = 
   24|     digit { digit }           LEX<<n = Convert.ToInt32(tokenStr);>>.
   25| 
   26|   ident<<out string idStr>> =
   27|     letter { letter | digit } LEX<<idStr = tokenStr;>>
   28|   .
   29| 
   30| NONTERMINALS
   31|   MiniC.
   32|   VarDecl.
   33|   StatSeq.
   34|   Stat.
   35|   IfStat.
   36|   Expr.
   37|   Term.
   38|   Fact.
   39| 
   40| RULES
   41| 
   42|   MiniC = 'void' 'main' '(' ')' '{'
   43|     [ VarDecl ]
   44|     StatSeq
   45|     '}' SEM<<System.Console.WriteLine("Number of Statements: " + numStats);>>.
   46| 
   47|   VarDecl =
   48|     'int' ident<<out string id1>> { ',' ident<<out string id2>> } ';' .
   49| 
   50|   StatSeq =
   51|     Stat { Stat } .
   52| 
   53|   Stat =
   54|     (';'
   55|     | ident<<out string id1>> '=' Expr ';'
   56|     | 'scanf' '(' ident<<out string id2>> ')' ';'
   57|     | 'printf' '(' Expr ')' ';'
   58|     | IfStat ) SEM<<numStats++;>>
   59|     .
   60| 
   61| IfStat = 'if' '(' Expr ')' Stat [ 'else' Stat ] .
   62| 
   63|   Expr = 
   64|     Term             
   65|     { '+' Term
   66|     | '-' Term
   67|     }.
   68|     
   69|   Term = 
   70|     Fact
   71|     { '*' Fact
   72|     | '/' Fact
   73|     }.
   74|     
   75|   Fact =     LOCAL<<int f = 0; string id = "";>>
   76|       ident<<out id>>
   77|     | number<<out f>>
   78|     | '(' Expr ')'.
   79| 
   80| END MiniC.
   81| 


error(s) and warning(s):
-----------------------

    0 lexical error(s) 
    0 syntax error(s)  
    0 semantic error(s)
    0 warning(s)       


start table:
-----------

   '('                     6 | ')'                       7
   '*'                     4 | '+'                       2
   ','                    10 | '-'                       3
   '/'                     5 | '0'..'9'                 13
   ';'                    11 | '='                      12
   'A'..'Z'               14 | '_'                      14
   'a'                    15 | 'b'                      14
   'c'..'f'               15 | 'g'..'h'                 14
   'i'                    15 | 'j'..'k'                 14
   'l'..'p'               15 | 'q'                      14
   'r'..'t'               15 | 'u'                      14
   'v'                    15 | 'w'..'z'                 14
   '{'                     8 | '}'                       9
   ELSE                    0 | 

ignored characters:
------------------

{ HT..LF, ' ' }

comment starts:
--------------

{ '/' }

character classes:
-----------------

1: { '0'..'9' }

2: { 'A'..'Z', '_', 'a'..'z' }

3: { 'a', 'c'..'f', 'i', 'l'..'p', 'r'..'t', 'v' }

4: { 'A'..'Z', '_', 'b', 'g'..'h', 'j'..'k', 'q', 'u', 'w'..'z' }
