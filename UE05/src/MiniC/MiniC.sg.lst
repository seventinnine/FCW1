Coco-2 SG (source: MiniC.atg)

    1| COMPILER MiniC
    2| 
    3| CHARACTER SETS
    4|   digit      = '0' .. '9'.
    5|   whiteSpace = CHR(9) + EOL IGNORE. /*' ' ignored by default*/
    6|   letter     = 'a' .. 'z' + 'A' .. 'Z' + '_'.
    7| 
    8| COMMENTS
    9|   FROM '/*' TO '*/' .
   10|   FROM '//' TO EOL .
   11| 
   12| KEYWORDS
   13|   'void'. 'main'. 'int'. 'scanf'. 'printf'. 'if'. 'else'.
   14| 
   15| TOKENS                      
   16|   '+'.  '-'.  '*'.  '/'.  '('.  ')'. 
   17|   '{'. '}'.
   18|   ','. ';'. '='. 
   19| 
   20| TOKEN CLASSES           
   21|   number<<out int n>> = 
   22|     digit { digit }           LEX<<n = Convert.ToInt32(tokenStr);>>.
   23| 
   24|   ident<<out string idStr>> =
   25|     letter { letter | digit } LEX<<idStr = tokenStr;>>
   26|   .
   27| 
   28| NONTERMINALS
   29|   MiniC.
   30|   VarDecl.
   31|   StatSeq.
   32|   Stat.
   33|   Expr.
   34|   Term.
   35|   Fact.
   36| 
   37| RULES
   38| 
   39|   MiniC = 'void' 'main' '(' ')' '{'
   40|     [ VarDecl ]
   41|     StatSeq
   42|     '}' .
   43| 
   44|   VarDecl =
   45|     'int' ident<<out string id1>> { ',' ident<<out string id2>> } ';' .
   46| 
   47|   StatSeq =
   48|     Stat { Stat } .
   49| 
   50|   Stat =
   51|     (';'
   52|     | ident<<out string id1>> '=' Expr ';'
   53|     | 'scanf' '(' ident<<out string id2>> ')' ';'
   54|     | 'printf' '(' Expr ')' ';'
   55|     ).
   56| 
   57|   Expr = 
   58|     Term             
   59|     { '+' Term
   60|     | '-' Term
   61|     }.
   62|     
   63|   Term = 
   64|     Fact
   65|     { '*' Fact
   66|     | '/' Fact
   67|     }.
   68|     
   69|   Fact =     LOCAL<<int f = 0; string id = "";>>
   70|       ident<<out id>>
   71|     | number<<out f>>
   72|     | '(' Expr ')'.
   73| 
   74| END MiniC.
   75| 


error(s) and warning(s):
-----------------------

    0 lexical error(s) 
    0 syntax error(s)  
    0 semantic error(s)
    0 warning(s)       


start table:
-----------

   '('                     6 | ')'                       7
   '*'                     4 | '+'                       2
   ','                    10 | '-'                       3
   '/'                     5 | '0'..'9'                 13
   ';'                    11 | '='                      12
   'A'..'Z'               14 | '_'                      14
   'a'                    15 | 'b'                      14
   'c'..'f'               15 | 'g'..'h'                 14
   'i'                    15 | 'j'..'k'                 14
   'l'..'p'               15 | 'q'                      14
   'r'..'t'               15 | 'u'                      14
   'v'                    15 | 'w'..'z'                 14
   '{'                     8 | '}'                       9
   ELSE                    0 | 

ignored characters:
------------------

{ HT..LF, ' ' }

comment starts:
--------------

{ '/' }

character classes:
-----------------

1: { '0'..'9' }

2: { 'A'..'Z', '_', 'a'..'z' }

3: { 'a', 'c'..'f', 'i', 'l'..'p', 'r'..'t', 'v' }

4: { 'A'..'Z', '_', 'b', 'g'..'h', 'j'..'k', 'q', 'u', 'w'..'z' }
