Coco-2 PGT (source: MiniC.atg)

    1| COMPILER MiniC
    2| 
    3| CHARACTER SETS
    4|   digit      = '0' .. '9'.
    5|   whiteSpace = CHR(9) + EOL IGNORE. /*' ' ignored by default*/
    6|   letter     = 'a' .. 'z' + 'A' .. 'Z' + '_'.
    7| 
    8| COMMENTS
    9|   FROM '/*' TO '*/' .
   10|   FROM '//' TO EOL .
   11| 
   12| KEYWORDS
   13|   'void'. 'main'. 'int'. 'scanf'. 'printf'. 'if'. 'else'.
   14| 
   15| TOKENS                      
   16|   '+'.  '-'.  '*'.  '/'.  '('.  ')'. 
   17|   '{'. '}'.
   18|   ','. ';'. '='. 
   19| 
   20| TOKEN CLASSES           
   21|   number<<out int n>> = 
   22|     digit { digit }           LEX<<n = Convert.ToInt32(tokenStr);>>.
   23| 
   24|   ident<<out string idStr>> =
   25|     letter { letter | digit } LEX<<idStr = tokenStr;>>
   26|   .
   27| 
   28| NONTERMINALS
   29|   MiniC.
   30|   VarDecl.
   31|   StatSeq.
   32|   Stat.
   33|   Expr.
   34|   Term.
   35|   Fact.
   36| 
   37| RULES
   38| 
   39|   MiniC = 'void' 'main' '(' ')' '{'
   40|     [ VarDecl ]
   41|     StatSeq
   42|     '}' .
   43| 
   44|   VarDecl =
   45|     'int' ident<<out string id1>> { ',' ident<<out string id2>> } ';' .
   46| 
   47|   StatSeq =
   48|     Stat { Stat } .
   49| 
   50|   Stat =
   51|     (';'
   52|     | ident<<out string id1>> '=' Expr ';'
   53|     | 'scanf' '(' ident<<out string id2>> ')' ';'
   54|     | 'printf' '(' Expr ')' ';'
   55|     ).
   56| 
   57|   Expr = 
   58|     Term             
   59|     { '+' Term
   60|     | '-' Term
   61|     }.
   62|     
   63|   Term = 
   64|     Fact
   65|     { '*' Fact
   66|     | '/' Fact
   67|     }.
   68|     
   69|   Fact =     LOCAL<<int f = 0; string id = "";>>
   70|       ident<<out id>>
   71|     | number<<out f>>
   72|     | '(' Expr ')'.
   73| 
   74| END MiniC.
   75| 


error(s) and warning(s):
-----------------------

    0 lexical error(s) 
    0 syntax error(s)  
    0 semantic error(s)
    0 warning(s)       


statistics:
----------

   20 terminals
    7 nonterminals
   20 alternatives
   52 nodes in top-down graph
    3 eps sets (with look ahead)
    1 any sets

  175 bytes G-code

grammar has no deletable nonterminals
-------------------------------------



G-code:

======

-----  MiniC  ------------------------------
    1  T      void
    3  T      main
    5  T      '('
    7  T      ')'
    9  T      '{'
   11  NTA    VarDecl                16   16
   16  NT     StatSeq                 2
   19  T      '}'
   21  RET

-----  VarDecl  ----------------------------
   22  T      int
   24  TC     ident                   1
   27  TA     ','                    37
   31  TC     ident                   2
   34  JMP       27

   37  T      ';'
   39  RET

-----  StatSeq  ----------------------------
   40  NT     Stat                    1
   43  NTA    Stat                   51   51
   48  JMP       43

   51  EPS        1
   53  RET

-----  Stat  -------------------------------
   54  TA     ';'                    59
   58  RET

   59  TCA    ident                  72   72
   64  T      '='
   66  NT     Expr                    2
   69  T      ';'
   71  RET

   72  TA     scanf                  86
   76  T      '('
   78  TC     ident                   3
   81  T      ')'
   83  T      ';'
   85  RET

   86  T      printf
   88  T      '('
   90  NT     Expr                    4
   93  T      ')'
   95  T      ';'
   97  RET

-----  Expr  -------------------------------
   98  NT     Term                    1
  101  TA     '+'                   111
  105  NT     Term                    2
  108  JMP      101

  111  TA     '-'                   121
  115  NT     Term                    3
  118  JMP      101

  121  EPS        2
  123  RET

-----  Term  -------------------------------
  124  NT     Fact                    1
  127  TA     '*'                   137
  131  NT     Fact                    2
  134  JMP      127

  137  TA     '/'                   147
  141  NT     Fact                    3
  144  JMP      127

  147  EPS        3
  149  RET

-----  Fact  -------------------------------
  150  TCA    ident                 156  156
  155  RET

  156  TCA    number                162  162
  161  RET

  162  T      '('
  164  NT     Expr                    3
  167  T      ')'
  169  RET

-----  R o o t  ----------------------------
  170  NT     MiniC                   1
  173  T      'end of file'
  175  RET


nonterminals:
============

MiniC                     1     { void }
VarDecl                  22     { int }
StatSeq                  40     { scanf, printf, ';', ident }
Stat                     54     { scanf, printf, ';', ident }
Expr                     98     { '(', number, ident }
Term                    124     { '(', number, ident }
Fact                    150     { '(', number, ident }


eps look-aheads:
===============

    1   { '}' }
    2   { ')', ';' }
    3   { '+', '-', ')', ';' }
