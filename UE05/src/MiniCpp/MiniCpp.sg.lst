Coco-2 SG (source: MiniCpp.atg)

    1| COMPILER MiniCpp
    2| 
    3|   SEM<<
    4| 
    5|   
    6|   private static int numStats = 0;  
    7|   private static int cyclomaticComplexity = 1;
    8|   private static System.Collections.Generic.Dictionary<string, string> callGraph = new System.Collections.Generic.Dictionary<string, string>();
    9|   private static string currFunc = "";
   10|   private static System.Collections.Generic.SortedSet<string> n1 = new System.Collections.Generic.SortedSet<string>();
   11|   private static System.Collections.Generic.SortedSet<Tuple<string, string> > n2 = new System.Collections.Generic.SortedSet<Tuple<string, string> >();
   12|   private static int N1 = 0;
   13|   private static int N2 = 0;
   14| 
   15|   private static void PrintAnalysisResults() {
   16|     System.Console.WriteLine("b)");
   17|     System.Console.WriteLine("  Lines of Code: " + MiniCppLex.curLine);
   18|     System.Console.WriteLine("  Number of statements: " + numStats);
   19|     System.Console.WriteLine("  Cyclomatic Complexity: " + cyclomaticComplexity);
   20|     foreach (var item in callGraph) {
   21|       System.Console.WriteLine("    " + item.Key + " -> " + item.Value);
   22|     }
   23|     foreach (var item in n2) {
   24|       System.Console.WriteLine("    " + item.Item1 + " -> " + item.Item2);
   25|     }
   26|     int n = n1.Count + n2.Count;
   27|     int N = N1 + N2;
   28|     double V = (double)N * System.Math.Log(n, 2);
   29|     double D = (double)(n1.Count * N2) / (double)(2 * n2.Count);
   30|     double E = D * V;
   31|     System.Console.WriteLine("c)");
   32|     System.Console.WriteLine("  vocabulary: " + n);
   33|     System.Console.WriteLine("  length: " + N);
   34|     System.Console.WriteLine("  volume: " + V);
   35|     System.Console.WriteLine("  difficulty: " + D);
   36|     System.Console.WriteLine("  effort: " + E);
   37|   }
   38|   
   39|   
   40|   >>
   41| 
   42| CHARACTER SETS
   43|   digit      = '0' .. '9'.
   44|   whiteSpace = CHR(9) + EOL IGNORE. /*' ' ignored by default*/
   45|   letter     = 'a' .. 'z' + 'A' .. 'Z' + '_'.
   46|   anyButDoubleQuote = ANY - '"'.
   47| 
   48| COMMENTS
   49|   FROM '/*' TO '*/' .
   50|   FROM '//' TO EOL .
   51| 
   52| KEYWORDS
   53|   'const'. 'false'. 'true'. 'nullptr'. 'bool'. 'if'. 'else'. 'while'. 'break'. 'cin'. 'cout'. 'endl'. 'delete'. 'return'. 'new'. 'void'. 'int'.
   54| 
   55| TOKENS                      
   56|   '+'.  '-'.  '*'.  '/'.  '('.  ')'. '%'. '<'. '>'. '!'.
   57|   '{'. '}'.
   58|   ','. ';'. '='. 
   59|   '>='. '<='. '>>'. '<<'. '+='. '-='. '*='. '/='. '%='. '=='. '!='. '++'. '--'. '||'. '&&'. '['. ']'.
   60| 
   61| TOKEN CLASSES           
   62|   number<<out int n>> = 
   63|     digit { digit }           LEX<<n = Convert.ToInt32(tokenStr);>>
   64|   .
   65| 
   66|   ident<<out string idStr>> =
   67|     letter { letter | digit } LEX<<idStr = tokenStr;>>
   68|   .
   69| 
   70|   string<<out string str>> =
   71|     '"' { anyButDoubleQuote } '"' LEX<<str = tokenStr;>>
   72|   .
   73| 
   74| NONTERMINALS
   75|   MiniCpp.
   76|   ConstDef.
   77|   Init.
   78|   VarDef.
   79|   FormParList.
   80|   Type.
   81|   Block.
   82|   Stat.
   83|   EmptyStat.
   84|   BlockStat.
   85|   ExprStat.
   86|   IfStat.
   87|   WhileStat.
   88|   BreakStat.
   89|   InputStat.
   90|   OutputStat.
   91|   DeleteStat.
   92|   ReturnStat.
   93|   Expr.
   94|   OrExpr.
   95|   AndExpr.
   96|   RelExpr.
   97|   SimpleExpr.
   98|   Term.
   99|   NotFact.
  100|   Fact.
  101|   ActParList.
  102|   FormParTypeRight.
  103|   FormPar.
  104|   MutDef.
  105| 
  106| RULES
  107| 
  108|   MiniCpp = { ConstDef | MutDef | ';' } SEM<<PrintAnalysisResults();>>
  109|     .
  110|   ConstDef =                          LOCAL<<string idStr1 = ""; string idStrN = "";>>
  111|      'const' Type ident<<out idStr1>> SEM<<n2.Add(Tuple.Create(currFunc, idStr1)); N2++;>> Init { ',' ident<<out idStrN>> SEM<<n2.Add(Tuple.Create(currFunc, idStrN)); N2++;>> Init } ';' .
  112|   Init =                              LOCAL<<int n = 0;>>
  113|     '=' ( false | true | 'nullptr'
  114|     | [ '+' | '-' SEM<<n1.Add("-"); N1++;>> ] number<<out n>> ) .
  115|   
  116|   
  117|   // VarDef | FuncHead
  118|   MutDef =                   LOCAL<<string idStr = "";>>
  119|       Type [ '*' ] ident<<out idStr>> ( [ Init ] SEM<<n2.Add(Tuple.Create(currFunc, idStr)); N2++;>> |
  120|        '(' [ FormParList ] ')' SEM<<currFunc = idStr;>> ) [ Block ] SEM<<currFunc = ""; //reset curr func name>>
  121|     .
  122| 
  123|   VarDef =                    LOCAL<<string idStr1 = ""; string idStrN = "";>>
  124|     Type [ '*' ] ident<<out idStr1>> [ Init ] SEM<<n2.Add(Tuple.Create(currFunc, idStr1)); N2++;>>
  125|     { ',' [ '*' ] ident<<out idStrN>> [ Init ] SEM<<n2.Add(Tuple.Create(currFunc, idStrN)); N2++;>> } ';' 
  126|     .
  127|   
  128|   FormParList =               
  129|     FormPar { ',' FormPar }  
  130|     .
  131| 
  132|   FormPar = 
  133|     ( 'void' [ FormParTypeRight ]
  134|     | ('int' | 'bool' ) FormParTypeRight
  135|     )
  136|     .
  137|   FormParTypeRight =                       LOCAL<<string idStr = "";>>
  138|    [ '*' ] ident<<out idStr>> [ '[' ']' ]
  139|    .
  140| 
  141|   Type = 'void' | 'bool' | 'int' .
  142|   Block = '{' { ConstDef | VarDef | Stat } '}' .
  143|   Stat = ( EmptyStat | BlockStat | ExprStat
  144|     | IfStat | WhileStat | BreakStat
  145|     | InputStat | OutputStat
  146|     | DeleteStat | ReturnStat
  147|     ) SEM<<numStats++;>>.
  148|   EmptyStat = ';' .
  149|   BlockStat = Block .
  150|   ExprStat = Expr ';' .
  151|   IfStat = 'if' SEM<<cyclomaticComplexity++; n1.Add("if"); N1++;>> '(' Expr ')' Stat [ 'else' SEM<<n1.Add("else"); N1++;>> Stat ] .
  152|   WhileStat = 'while' SEM<<cyclomaticComplexity++; n1.Add("while"); N1++;>> '(' Expr ')' Stat .
  153|   BreakStat = 'break' SEM<<n1.Add("break"); N1++;>> ';' .
  154|   InputStat =                             LOCAL<<string idStr = "";>>
  155|     'cin' '>>' ident<<out idStr>> ';' .
  156|   OutputStat =                          LOCAL<<string str = "";>>
  157|     'cout' '<<' ( Expr | string<<out str>> | 'endl' )
  158|     { '<<' ( Expr | string<<out str>> | 'endl' ) } ';' .
  159|   DeleteStat =                    LOCAL<<string idStr = "";>>
  160|     'delete' '[' ']' ident<<out idStr>> ';' .
  161|   ReturnStat = 'return' [ Expr ] ';' .
  162|   Expr = 
  163|     OrExpr { 
  164|       ( '=' SEM<<n1.Add("="); N1++;>> 
  165|       | '+=' SEM<<n1.Add("+="); N1++;>> 
  166|       | '-=' SEM<<n1.Add("-="); N1++;>> 
  167|       | '*=' SEM<<n1.Add("*="); N1++;>>
  168|       | '/=' SEM<<n1.Add("/="); N1++;>>
  169|       | '%=' SEM<<n1.Add("%="); N1++;>> ) OrExpr } .
  170|   OrExpr = AndExpr { '||' SEM<<n1.Add("||"); N1++;>> AndExpr } .
  171|   AndExpr = RelExpr { '&&' SEM<<n1.Add("&&"); N1++;>> RelExpr } .
  172|   RelExpr = SimpleExpr {
  173|     ( '==' SEM<<n1.Add("=="); N1++;>> 
  174|     | '!=' SEM<<n1.Add("!="); N1++;>> 
  175|     | '<' SEM<<n1.Add("<"); N1++;>>
  176|     | '<=' SEM<<n1.Add("<="); N1++;>>
  177|     | '>' SEM<<n1.Add(">"); N1++;>>
  178|     | '>=' SEM<<n1.Add(">="); N1++;>> ) SimpleExpr } .
  179|   SimpleExpr = [ '+' SEM<<n1.Add("+"); N1++;>> | '-' SEM<<n1.Add("-"); N1++;>> ]
  180|     Term { ( '+' SEM<<n1.Add("+"); N1++;>> | '-' SEM<<n1.Add("-"); N1++;>> ) Term } .
  181|   Term = 
  182|     NotFact { 
  183|       ( '*' SEM<<n1.Add("*"); N1++;>>
  184|       | '/' SEM<<n1.Add("/"); N1++;>> 
  185|       | '%' SEM<<n1.Add("%"); N1++;>> ) NotFact } .
  186|   NotFact = [ '!' SEM<<n1.Add("!"); N1++;>> ] Fact .
  187|   Fact =                              LOCAL<<int n = 0; string idStr = "";>>
  188|     ( 'false' | 'true' | 'nullptr' | number<<out n>>
  189|     | [ '++' SEM<<n1.Add("++"); N1++;>> | '--' SEM<<n1.Add("--"); N1++;>> ]
  190|       ident<<out idStr>> [ ( '[' Expr ']' )
  191|         | ( '(' [ ActParList ] ')' SEM<<callGraph.Add(currFunc, idStr); n2.Add(Tuple.Create(currFunc, idStr)); N2++;>> )
  192|         ]
  193|       [ '++' SEM<<n1.Add("++"); N1++;>> | '--' SEM<<n1.Add("--"); N1++;>> ]
  194|     | 'new' Type '[' Expr ']'
  195|     | '(' Expr ')'
  196|     ) .
  197|   ActParList = Expr { ',' Expr } .
  198| 
  199| END MiniCpp.
  200| 


error(s) and warning(s):
-----------------------

    0 lexical error(s) 
    0 syntax error(s)  
    0 semantic error(s)
    0 warning(s)       


start table:
-----------

   '!'                    32 | '\"'                     29
   '%'                    33 | '&'                      23
   '('                     2 | ')'                       3
   '*'                    34 | '+'                      35
   ','                     6 | '-'                      36
   '/'                    37 | '0'..'9'                 27
   ';'                     7 | '<'                      38
   '='                    39 | '>'                      40
   'A'..'Z'               28 | '['                      25
   ']'                    26 | '_'                      28
   'a'..'f'               31 | 'g'                      28
   'h'..'i'               31 | 'j'                      28
   'k'..'l'               31 | 'm'                      28
   'n'..'p'               31 | 'q'                      28
   'r'..'w'               31 | 'x'..'z'                 28
   '{'                     4 | '|'                      21
   '}'                     5 | ELSE                      0
   

ignored characters:
------------------

{ HT..LF, ' ' }

comment starts:
--------------

{ '/' }

character classes:
-----------------

1: { '0'..'9' }

2: { 'A'..'Z', '_', 'a'..'z' }

3: { EF..'!', '#'..'Ã¿' }

4: { 'a'..'f', 'h'..'i', 'k'..'l', 'n'..'p', 'r'..'w' }

5: { 'A'..'Z', '_', 'g', 'j', 'm', 'q', 'x'..'z' }
