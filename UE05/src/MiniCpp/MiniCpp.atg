COMPILER MiniCpp

  SEM<<

  private static int numStats = 0;  
  private static int cyclomaticComplexity = 1;
  private static System.Collections.Generic.SortedSet<string> n1 = new System.Collections.Generic.SortedSet<string>();
  private static System.Collections.Generic.SortedSet<string> n2 = new System.Collections.Generic.SortedSet<string>();
  private static int N1 = 0;
  private static int N2 = 0;

  private static void PrintAnalysisResults() {
    System.Console.WriteLine("using .NET Framework " + System.Environment.Version);

    System.Console.WriteLine("b)");
    System.Console.WriteLine("  Lines of Code:         " + MiniCppLex.curLine);
    System.Console.WriteLine("  Number of statements:  " + numStats);
    System.Console.WriteLine("  Cyclomatic Complexity: " + cyclomaticComplexity);

    string n1AsString = // cannot do "using System.Linq" here :(
      System.Linq.Enumerable.Aggregate(n1, (l, r) => l.ToString() + ", " + r.ToString());
    string n2AsString = 
      System.Linq.Enumerable.Aggregate(n2, (l, r) => l.ToString() + ", " + r.ToString());
    int n = n1.Count + n2.Count;
    int N = N1 + N2;
    double V = (double)N * System.Math.Log(n, 2);
    double D = (double)(n1.Count * N2) / (double)(2 * n2.Count);
    double E = D * V;
    System.Console.WriteLine("c)");
    System.Console.WriteLine("  n1: " + n1AsString);
    System.Console.WriteLine("  n2: " + n2AsString);
    System.Console.WriteLine("  N1: " + N1);
    System.Console.WriteLine("  N2: " + N2);
    System.Console.WriteLine();
    System.Console.WriteLine("  vocabulary: " + n);
    System.Console.WriteLine("  length:     " + N);
    System.Console.WriteLine("  volume:     " + V.ToString("N2"));
    System.Console.WriteLine("  difficulty: " + D.ToString("N2"));
    System.Console.WriteLine("  effort:     " + E.ToString("N2"));
  }

  private static void AddToN1(string item) {
    n1.Add(item); N1++;
  }

  private static void AddToN2(string item) {
    n2.Add(item); N2++;
  }
  
  // if user selects "[c]ontinue", we have to reset all of our collected data
  private static void Reset() {
    numStats = 0;
    cyclomaticComplexity = 1;
    n1.Clear();
    n2.Clear();
    N1 = 0;
    N2 = 0;
  }

  >>

CHARACTER SETS
  digit      = '0' .. '9'.
  whiteSpace = CHR(9) + EOL IGNORE. /*' ' ignored by default*/
  letter     = 'a' .. 'z' + 'A' .. 'Z' + '_'.
  anyButDoubleQuote = ANY - '"'.

COMMENTS
  FROM '/*' TO '*/' .
  FROM '//' TO EOL .

KEYWORDS
  'const'. 'false'. 'true'. 'nullptr'. 'bool'. 'if'. 'else'. 'while'. 'break'. 'cin'. 'cout'. 'endl'. 'delete'. 'return'. 'new'. 'void'. 'int'.

TOKENS                      
  '+'.  '-'.  '*'.  '/'.  '('.  ')'. '%'. '<'. '>'. '!'.
  '{'. '}'.
  ','. ';'. '='. 
  '>='. '<='. '>>'. '<<'. '+='. '-='. '*='. '/='. '%='. '=='. '!='. '++'. '--'. '||'. '&&'. '['. ']'.

TOKEN CLASSES           
  number<<out int n>> = 
    digit { digit }           LEX<<n = Convert.ToInt32(tokenStr);>>
  .

  ident<<out string idStr>> =
    letter { letter | digit } LEX<<idStr = tokenStr;>>
  .

  string<<out string str>> =
    '"' { anyButDoubleQuote } '"' LEX<<str = tokenStr;>>
  .

NONTERMINALS
  MiniCpp.
  ConstDef.
  Init.
  VarDef.
  FormParList.
  Type.
  Block.
  Stat.
  EmptyStat.
  BlockStat.
  ExprStat.
  IfStat.
  WhileStat.
  BreakStat.
  InputStat.
  OutputStat.
  DeleteStat.
  ReturnStat.
  Expr.
  OrExpr.
  AndExpr.
  RelExpr.
  SimpleExpr.
  Term.
  NotFact.
  Fact.
  ActParList.
  FormParTypeRight.
  MutDef.

RULES

  MiniCpp = SEM<<Reset();>> { ConstDef | MutDef | ';' } SEM<<PrintAnalysisResults();>>
    .
  ConstDef =                          LOCAL<<string idStr1 = ""; string idStrN = "";>>
     'const' Type ident<<out idStr1>> SEM<<AddToN2(idStr1);>> Init { ',' ident<<out idStrN>> SEM<<AddToN2(idStrN);>> Init } ';' .
  Init =                              LOCAL<<int n = 0;>>
    '=' ( false | true | 'nullptr'
    | [ '+' | '-' ] number<<out n>> SEM<<AddToN2(n.ToString());>> ) .
  // VarDef | FuncHead => not ConstDef, so its [Mut]able
  MutDef =                   LOCAL<<string idStr = "";>>
      Type [ '*' ] ident<<out idStr>> ( [ Init ] SEM<<AddToN2(idStr);>> |
       '(' [ FormParList ] ')' SEM<<AddToN1("()");>> ) [ Block ]
    .
  VarDef =                    LOCAL<<string idStr1 = ""; string idStrN = "";>>
    Type [ '*' ] ident<<out idStr1>> [ Init ] SEM<<AddToN2(idStr1);>>
    { ',' [ '*' ] ident<<out idStrN>> [ Init ] SEM<<AddToN2(idStrN);>> } ';' 
    .
  FormParList =              
    ( 'void' [ FormParTypeRight { ',' Type FormParTypeRight } ]
    | ('int' | 'bool' ) FormParTypeRight { ',' Type FormParTypeRight } )
    .
  FormParTypeRight =                       LOCAL<<string idStr = "";>> 
    [ '*' ] ident<<out idStr>> [ '[' ']' ]
    .
  Type = 'void' | 'bool' | 'int' .
  Block = '{' { ConstDef | VarDef | Stat } '}' SEM<<AddToN1("{}");>> .
  Stat = ( EmptyStat | BlockStat | ExprStat
    | IfStat | WhileStat | BreakStat
    | InputStat | OutputStat
    | DeleteStat | ReturnStat
    ) SEM<<numStats++;>>.
  EmptyStat = ';' .
  BlockStat = Block .
  ExprStat = Expr ';' .
  IfStat = 'if' SEM<<cyclomaticComplexity++; AddToN1("if");>> '(' Expr ')' Stat [ 'else' SEM<<AddToN1("else");>> Stat ] .
  WhileStat = 'while' SEM<<cyclomaticComplexity++; AddToN1("while");>> '(' Expr ')' Stat .
  BreakStat = 'break' SEM<<AddToN1("break");>> ';' .
  InputStat =                             LOCAL<<string idStr = "";>>
    'cin' SEM<<AddToN1("cin");>> '>>' ident<<out idStr>> ';' .
  OutputStat =                          LOCAL<<string str = "";>>
    'cout' SEM<<AddToN1("cout");>> '<<' ( Expr | string<<out str>> SEM<<AddToN2(str);>>  | 'endl' )
    { '<<' ( Expr | string<<out str>> SEM<<AddToN2(str);>> | 'endl' ) } ';' .
  DeleteStat =                    LOCAL<<string idStr = "";>>
    'delete' '[' ']' ident<<out idStr>> ';' .
  ReturnStat = 'return' [ Expr ] ';' .
  Expr = 
    OrExpr { 
      ( '=' SEM<<AddToN1("=");>> 
      | '+=' SEM<<AddToN1("+=");>> 
      | '-=' SEM<<AddToN1("-=");>> 
      | '*=' SEM<<AddToN1("*=");>>
      | '/=' SEM<<AddToN1("/=");>>
      | '%=' SEM<<AddToN1("%=");>> ) OrExpr } .
  OrExpr = AndExpr { '||' SEM<<AddToN1("||");>> AndExpr } .
  AndExpr = RelExpr { '&&' SEM<<AddToN1("&&");>> RelExpr } .
  RelExpr = SimpleExpr {
    ( '==' SEM<<AddToN1("==");>> 
    | '!=' SEM<<AddToN1("!=");>> 
    | '<' SEM<<AddToN1("<");>>
    | '<=' SEM<<AddToN1("<=");>>
    | '>' SEM<<AddToN1(">");>>
    | '>=' SEM<<AddToN1(">=");>> ) SimpleExpr } .
  SimpleExpr = [ '+' SEM<<AddToN1("+");>> | '-' SEM<<AddToN1("-");>> ]
    Term { ( '+' SEM<<AddToN1("+");>> | '-' SEM<<AddToN1("-");>> ) Term } .
  Term = 
    NotFact { 
      ( '*' SEM<<AddToN1("*");>>
      | '/' SEM<<AddToN1("/");>> 
      | '%' SEM<<AddToN1("%");>> ) NotFact } .
  NotFact = [ '!' SEM<<AddToN1("!");>> ] Fact .
  Fact =                              LOCAL<<int n = 0; string idStr = "";>>
    ( 'false' | 'true' | 'nullptr' | number<<out n>> SEM<<AddToN1(n.ToString());>> 
    | [ '++' SEM<<AddToN1("++");>> | '--' SEM<<AddToN1("--");>> ]
      ident<<out idStr>> [ ( '[' Expr ']' )
        | ( '(' [ ActParList ] ')' SEM<<AddToN2(idStr);>> )
        ]
      [ '++' SEM<<AddToN1("++");>> | '--' SEM<<AddToN1("--");>> ]
    | 'new' Type '[' Expr ']'
    | '(' Expr ')'
    ) .
  ActParList = Expr { ',' Expr } .

END MiniCpp.

