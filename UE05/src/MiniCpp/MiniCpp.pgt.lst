Coco-2 PGT (source: MiniCpp.atg)



    1| COMPILER MiniCpp
    2| 
    3|   SEM<<
    4| 
    5|   private static int numStats = 0;  
    6|   private static int cyclomaticComplexity = 1;
    7|   private static System.Collections.Generic.SortedSet<string> n1 = new System.Collections.Generic.SortedSet<string>();
    8|   private static System.Collections.Generic.SortedSet<string> n2 = new System.Collections.Generic.SortedSet<string>();
    9|   private static int N1 = 0;
   10|   private static int N2 = 0;
   11| 
   12|   private static void PrintAnalysisResults() {
   13|     System.Console.WriteLine("using .NET Framework " + System.Environment.Version);
   14| 
   15|     System.Console.WriteLine("b)");
   16|     System.Console.WriteLine("  Lines of Code:         " + MiniCppLex.curLine);
   17|     System.Console.WriteLine("  Number of statements:  " + numStats);
   18|     System.Console.WriteLine("  Cyclomatic Complexity: " + cyclomaticComplexity);
   19| 
   20|     string n1AsString = // cannot do "using System.Linq" here :(
   21|       System.Linq.Enumerable.Aggregate(n1, (l, r) => l.ToString() + ", " + r.ToString());
   22|     string n2AsString = 
   23|       System.Linq.Enumerable.Aggregate(n2, (l, r) => l.ToString() + ", " + r.ToString());
   24|     int n = n1.Count + n2.Count;
   25|     int N = N1 + N2;
   26|     double V = (double)N * System.Math.Log(n, 2);
   27|     double D = (double)(n1.Count * N2) / (double)(2 * n2.Count);
   28|     double E = D * V;
   29|     System.Console.WriteLine("c)");
   30|     System.Console.WriteLine("  n1: " + n1AsString);
   31|     System.Console.WriteLine("  n2: " + n2AsString);
   32|     System.Console.WriteLine("  N1: " + N1);
   33|     System.Console.WriteLine("  N2: " + N2);
   34|     System.Console.WriteLine();
   35|     System.Console.WriteLine("  vocabulary: " + n);
   36|     System.Console.WriteLine("  length:     " + N);
   37|     System.Console.WriteLine("  volume:     " + V.ToString("N2"));
   38|     System.Console.WriteLine("  difficulty: " + D.ToString("N2"));
   39|     System.Console.WriteLine("  effort:     " + E.ToString("N2"));
   40|   }
   41| 
   42|   private static void AddToN1(string item) {
   43|     n1.Add(item); N1++;
   44|   }
   45| 
   46|   private static void AddToN2(string item) {
   47|     n2.Add(item); N2++;
   48|   }
   49|   
   50|   // if user selects "[c]ontinue", we have to reset all of our collected data
   51|   private static void Reset() {
   52|     numStats = 0;
   53|     cyclomaticComplexity = 1;
   54|     n1.Clear();
   55|     n2.Clear();
   56|     N1 = 0;
   57|     N2 = 0;
   58|   }
   59| 
   60|   >>
   61| 
   62| CHARACTER SETS
   63|   digit      = '0' .. '9'.
   64|   whiteSpace = CHR(9) + EOL IGNORE. /*' ' ignored by default*/
   65|   letter     = 'a' .. 'z' + 'A' .. 'Z' + '_'.
   66|   anyButDoubleQuote = ANY - '"'.
   67| 
   68| COMMENTS
   69|   FROM '/*' TO '*/' .
   70|   FROM '//' TO EOL .
   71| 
   72| KEYWORDS
   73|   'const'. 'false'. 'true'. 'nullptr'. 'bool'. 'if'. 'else'. 'while'. 'break'. 'cin'. 'cout'. 'endl'. 'delete'. 'return'. 'new'. 'void'. 'int'.
   74| 
   75| TOKENS                      
   76|   '+'.  '-'.  '*'.  '/'.  '('.  ')'. '%'. '<'. '>'. '!'.
   77|   '{'. '}'.
   78|   ','. ';'. '='. 
   79|   '>='. '<='. '>>'. '<<'. '+='. '-='. '*='. '/='. '%='. '=='. '!='. '++'. '--'. '||'. '&&'. '['. ']'.
   80| 
   81| TOKEN CLASSES           
   82|   number<<out int n>> = 
   83|     digit { digit }           LEX<<n = Convert.ToInt32(tokenStr);>>
   84|   .
   85| 
   86|   ident<<out string idStr>> =
   87|     letter { letter | digit } LEX<<idStr = tokenStr;>>
   88|   .
   89| 
   90|   string<<out string str>> =
   91|     '"' { anyButDoubleQuote } '"' LEX<<str = tokenStr;>>
   92|   .
   93| 
   94| NONTERMINALS
   95|   MiniCpp.
   96|   ConstDef.
   97|   Init.
   98|   VarDef.
   99|   FormParList.
  100|   Type.
  101|   Block.
  102|   Stat.
  103|   EmptyStat.
  104|   BlockStat.
  105|   ExprStat.
  106|   IfStat.
  107|   WhileStat.
  108|   BreakStat.
  109|   InputStat.
  110|   OutputStat.
  111|   DeleteStat.
  112|   ReturnStat.
  113|   Expr.
  114|   OrExpr.
  115|   AndExpr.
  116|   RelExpr.
  117|   SimpleExpr.
  118|   Term.
  119|   NotFact.
  120|   Fact.
  121|   ActParList.
  122|   FormParTypeRight.
  123|   MutDef.
  124| 
  125| RULES
  126| 
  127|   MiniCpp = SEM<<Reset();>> { ConstDef | MutDef | ';' } SEM<<PrintAnalysisResults();>>
  128|     .
  129|   ConstDef =                          LOCAL<<string idStr1 = ""; string idStrN = "";>>
  130|      'const' Type ident<<out idStr1>> SEM<<AddToN2(idStr1);>> Init { ',' ident<<out idStrN>> SEM<<AddToN2(idStrN);>> Init } ';' .
  131|   Init =                              LOCAL<<int n = 0;>>
  132|     '=' ( false | true | 'nullptr'
  133|     | [ '+' | '-' ] number<<out n>> SEM<<AddToN2(n.ToString());>> ) .
  134|   // VarDef | FuncHead => not ConstDef, so its [Mut]able
  135|   MutDef =                   LOCAL<<string idStr = "";>>
  136|       Type [ '*' ] ident<<out idStr>> ( [ Init ] SEM<<AddToN2(idStr);>> |
  137|        '(' [ FormParList ] ')' SEM<<AddToN1("()");>> ) [ Block ]
  138|     .
  139|   VarDef =                    LOCAL<<string idStr1 = ""; string idStrN = "";>>
  140|     Type [ '*' ] ident<<out idStr1>> [ Init ] SEM<<AddToN2(idStr1);>>
  141|     { ',' [ '*' ] ident<<out idStrN>> [ Init ] SEM<<AddToN2(idStrN);>> } ';' 
  142|     .
  143|   FormParList =              
  144|     ( 'void' [ FormParTypeRight { ',' Type FormParTypeRight } ]
  145|     | ('int' | 'bool' ) FormParTypeRight { ',' Type FormParTypeRight } )
  146|     .
  147|   FormParTypeRight =                       LOCAL<<string idStr = "";>> 
  148|     [ '*' ] ident<<out idStr>> [ '[' ']' ]
  149|     .
  150|   Type = 'void' | 'bool' | 'int' .
  151|   Block = '{' { ConstDef | VarDef | Stat } '}' SEM<<AddToN1("{}");>> .
  152|   Stat = ( EmptyStat | BlockStat | ExprStat
  153|     | IfStat | WhileStat | BreakStat
  154|     | InputStat | OutputStat
  155|     | DeleteStat | ReturnStat
  156|     ) SEM<<numStats++;>>.
  157|   EmptyStat = ';' .
  158|   BlockStat = Block .
  159|   ExprStat = Expr ';' .
  160|   IfStat = 'if' SEM<<cyclomaticComplexity++; AddToN1("if");>> '(' Expr ')' Stat [ 'else' SEM<<AddToN1("else");>> Stat ] .
!WRN!                                                                                    ^LL(1) error (start AND succ): else
  161|   WhileStat = 'while' SEM<<cyclomaticComplexity++; AddToN1("while");>> '(' Expr ')' Stat .
  162|   BreakStat = 'break' SEM<<AddToN1("break");>> ';' .
  163|   InputStat =                             LOCAL<<string idStr = "";>>
  164|     'cin' SEM<<AddToN1("cin");>> '>>' ident<<out idStr>> ';' .
  165|   OutputStat =                          LOCAL<<string str = "";>>
  166|     'cout' SEM<<AddToN1("cout");>> '<<' ( Expr | string<<out str>> SEM<<AddToN2(str);>>  | 'endl' )
  167|     { '<<' ( Expr | string<<out str>> SEM<<AddToN2(str);>> | 'endl' ) } ';' .
  168|   DeleteStat =                    LOCAL<<string idStr = "";>>
  169|     'delete' '[' ']' ident<<out idStr>> ';' .
  170|   ReturnStat = 'return' [ Expr ] ';' .
  171|   Expr = 
  172|     OrExpr { 
  173|       ( '=' SEM<<AddToN1("=");>> 
  174|       | '+=' SEM<<AddToN1("+=");>> 
  175|       | '-=' SEM<<AddToN1("-=");>> 
  176|       | '*=' SEM<<AddToN1("*=");>>
  177|       | '/=' SEM<<AddToN1("/=");>>
  178|       | '%=' SEM<<AddToN1("%=");>> ) OrExpr } .
  179|   OrExpr = AndExpr { '||' SEM<<AddToN1("||");>> AndExpr } .
  180|   AndExpr = RelExpr { '&&' SEM<<AddToN1("&&");>> RelExpr } .
  181|   RelExpr = SimpleExpr {
  182|     ( '==' SEM<<AddToN1("==");>> 
  183|     | '!=' SEM<<AddToN1("!=");>> 
  184|     | '<' SEM<<AddToN1("<");>>
  185|     | '<=' SEM<<AddToN1("<=");>>
  186|     | '>' SEM<<AddToN1(">");>>
  187|     | '>=' SEM<<AddToN1(">=");>> ) SimpleExpr } .
  188|   SimpleExpr = [ '+' SEM<<AddToN1("+");>> | '-' SEM<<AddToN1("-");>> ]
  189|     Term { ( '+' SEM<<AddToN1("+");>> | '-' SEM<<AddToN1("-");>> ) Term } .
  190|   Term = 
  191|     NotFact { 
  192|       ( '*' SEM<<AddToN1("*");>>
  193|       | '/' SEM<<AddToN1("/");>> 
  194|       | '%' SEM<<AddToN1("%");>> ) NotFact } .
  195|   NotFact = [ '!' SEM<<AddToN1("!");>> ] Fact .
  196|   Fact =                              LOCAL<<int n = 0; string idStr = "";>>
  197|     ( 'false' | 'true' | 'nullptr' | number<<out n>> SEM<<AddToN1(n.ToString());>> 
  198|     | [ '++' SEM<<AddToN1("++");>> | '--' SEM<<AddToN1("--");>> ]
  199|       ident<<out idStr>> [ ( '[' Expr ']' )
  200|         | ( '(' [ ActParList ] ')' SEM<<AddToN2(idStr);>> )
  201|         ]
  202|       [ '++' SEM<<AddToN1("++");>> | '--' SEM<<AddToN1("--");>> ]
  203|     | 'new' Type '[' Expr ']'
  204|     | '(' Expr ')'
  205|     ) .
  206|   ActParList = Expr { ',' Expr } .
  207| 
  208| END MiniCpp.
  209| 


error(s) and warning(s):
-----------------------

    0 lexical error(s) 
    0 syntax error(s)  
    0 semantic error(s)
    1 warning(s)       


statistics:
----------

   52 terminals
   29 nonterminals
  126 alternatives
  211 nodes in top-down graph
   15 eps sets (with look ahead)
    1 any sets

  872 bytes G-code

deletable nonterminal(s):
------------------------

  MiniCpp


G-code:

======

-----  MiniCpp  ----------------------------
    1  SEM        1
    2  NTA    ConstDef               10   10
    7  JMP        2

   10  NTA    MutDef                 18   18
   15  JMP        2

   18  TA     ';'                    25
   22  JMP        2

   25  EPS        1
   27  SEM        4
   28  RET

-----  ConstDef  ---------------------------
   29  T      const
   31  NT     Type                    1
   34  TC     ident                   2
   37  SEM        3
   38  NT     Init                    4
   41  TA     ','                    55
   45  TC     ident                   5
   48  SEM        6
   49  NT     Init                    7
   52  JMP       41

   55  T      ';'
   57  RET

-----  Init  -------------------------------
   58  T      '='
   60  TA     false                  65
   64  RET

   65  TA     true                   70
   69  RET

   70  TA     nullptr                75
   74  RET

   75  TA     '+'                    84
   79  TC     number                  1
   82  SEM        2
   83  RET

   84  TA     '-'                    79
   88  JMP       79

-----  VarDef  -----------------------------
   91  NT     Type                    1
   94  TA     '*'                    98
   98  TC     ident                   2
  101  NTA    Init                  106  106
  106  EPS        2
  108  SEM        4
  109  TA     ','                   131
  113  TA     '*'                   117
  117  TC     ident                   5
  120  NTA    Init                  125  125
  125  EPS        2
  127  SEM        7
  128  JMP      109

  131  T      ';'
  133  RET

-----  FormParList  ------------------------
  134  TA     void                  162
  138  NTA    FormParTypeRight      159  159
  143  TA     ','                   156
  147  NT     Type                    2
  150  NT     FormParTypeRight        3
  153  JMP      143

  156  EPS        3
  158  RET

  159  EPS        3
  161  RET

  162  TA     int                   185
  166  NT     FormParTypeRight        4
  169  TA     ','                   182
  173  NT     Type                    5
  176  NT     FormParTypeRight        6
  179  JMP      169

  182  EPS        3
  184  RET

  185  T      bool
  187  JMP      166

-----  Type  -------------------------------
  190  TA     void                  195
  194  RET

  195  TA     bool                  200
  199  RET

  200  T      int
  202  RET

-----  Block  ------------------------------
  203  T      '{'
  205  NTA    ConstDef              213  213
  210  JMP      205

  213  NTA    VarDef                221  221
  218  JMP      205

  221  NTA    Stat                  229  229
  226  JMP      205

  229  T      '}'
  231  SEM        4
  232  RET

-----  Stat  -------------------------------
  233  NTA    EmptyStat             240  240
  238  SEM       11
  239  RET

  240  NTA    BlockStat             248  248
  245  JMP      238

  248  NTA    ExprStat              256  256
  253  JMP      238

  256  NTA    IfStat                264  264
  261  JMP      238

  264  NTA    WhileStat             272  272
  269  JMP      238

  272  NTA    BreakStat             280  280
  277  JMP      238

  280  NTA    InputStat             288  288
  285  JMP      238

  288  NTA    OutputStat            296  296
  293  JMP      238

  296  NTA    DeleteStat            304  304
  301  JMP      238

  304  NT     ReturnStat             10
  307  JMP      238

-----  EmptyStat  --------------------------
  310  T      ';'
  312  RET

-----  BlockStat  --------------------------
  313  NT     Block                   1
  316  RET

-----  ExprStat  ---------------------------
  317  NT     Expr                    1
  320  T      ';'
  322  RET

-----  IfStat  -----------------------------
  323  T      if
  325  SEM        1
  326  T      '('
  328  NT     Expr                    2
  331  T      ')'
  333  NT     Stat                    3
  336  TA     else                  345
  340  SEM        4
  341  NT     Stat                    5
  344  RET

  345  EPS        4
  347  RET

-----  WhileStat  --------------------------
  348  T      while
  350  SEM        1
  351  T      '('
  353  NT     Expr                    2
  356  T      ')'
  358  NT     Stat                    3
  361  RET

-----  BreakStat  --------------------------
  362  T      break
  364  SEM        1
  365  T      ';'
  367  RET

-----  InputStat  --------------------------
  368  T      cin
  370  SEM        1
  371  T      '>>'
  373  TC     ident                   2
  376  T      ';'
  378  RET

-----  OutputStat  -------------------------
  379  T      cout
  381  SEM        1
  382  T      '<<'
  384  NTA    Expr                  418  418
  389  TA     '<<'                  415
  393  NTA    Expr                  401  401
  398  JMP      389

  401  TCA    string                410  410
  406  SEM        7
  407  JMP      389

  410  T      endl
  412  JMP      389

  415  T      ';'
  417  RET

  418  TCA    string                427  427
  423  SEM        4
  424  JMP      389

  427  T      endl
  429  JMP      389

-----  DeleteStat  -------------------------
  432  T      delete
  434  T      '['
  436  T      ']'
  438  TC     ident                   1
  441  T      ';'
  443  RET

-----  ReturnStat  -------------------------
  444  T      return
  446  NTA    Expr                  451  451
  451  T      ';'
  453  RET

-----  Expr  -------------------------------
  454  NT     OrExpr                  1
  457  TA     '='                   468
  461  SEM        2
  462  NT     OrExpr                  8
  465  JMP      457

  468  TA     '+='                  476
  472  SEM        3
  473  JMP      462

  476  TA     '-='                  484
  480  SEM        4
  481  JMP      462

  484  TA     '*='                  492
  488  SEM        5
  489  JMP      462

  492  TA     '/='                  500
  496  SEM        6
  497  JMP      462

  500  TA     '%='                  508
  504  SEM        7
  505  JMP      462

  508  EPS        5
  510  RET

-----  OrExpr  -----------------------------
  511  NT     AndExpr                 1
  514  TA     '||'                  525
  518  SEM        2
  519  NT     AndExpr                 3
  522  JMP      514

  525  EPS        6
  527  RET

-----  AndExpr  ----------------------------
  528  NT     RelExpr                 1
  531  TA     '&&'                  542
  535  SEM        2
  536  NT     RelExpr                 3
  539  JMP      531

  542  EPS        7
  544  RET

-----  RelExpr  ----------------------------
  545  NT     SimpleExpr              1
  548  TA     '=='                  559
  552  SEM        2
  553  NT     SimpleExpr              8
  556  JMP      548

  559  TA     '!='                  567
  563  SEM        3
  564  JMP      553

  567  TA     '<'                   575
  571  SEM        4
  572  JMP      553

  575  TA     '<='                  583
  579  SEM        5
  580  JMP      553

  583  TA     '>'                   591
  587  SEM        6
  588  JMP      553

  591  TA     '>='                  599
  595  SEM        7
  596  JMP      553

  599  EPS        8
  601  RET

-----  SimpleExpr  -------------------------
  602  TA     '+'                   632
  606  SEM        1
  607  NT     Term                    3
  610  TA     '+'                   621
  614  SEM        4
  615  NT     Term                    6
  618  JMP      610

  621  TA     '-'                   629
  625  SEM        5
  626  JMP      615

  629  EPS        9
  631  RET

  632  TA     '-'                   607
  636  SEM        2
  637  JMP      607

-----  Term  -------------------------------
  640  NT     NotFact                 1
  643  TA     '*'                   654
  647  SEM        2
  648  NT     NotFact                 5
  651  JMP      643

  654  TA     '/'                   662
  658  SEM        3
  659  JMP      648

  662  TA     '%'                   670
  666  SEM        4
  667  JMP      648

  670  EPS       10
  672  RET

-----  NotFact  ----------------------------
  673  TA     '!'                   678
  677  SEM        1
  678  NT     Fact                    2
  681  RET

-----  Fact  -------------------------------
  682  TA     false                 687
  686  RET

  687  TA     true                  692
  691  RET

  692  TA     nullptr               697
  696  RET

  697  TCA    number                704  704
  702  SEM        2
  703  RET

  704  TA     '++'                  751
  708  SEM        3
  709  TC     ident                   5
  712  TA     '['                   736
  716  NT     Expr                    6
  719  T      ']'
  721  TA     '++'                  727
  725  SEM        9
  726  RET

  727  TA     '--'                  733
  731  SEM       10
  732  RET

  733  EPS       12
  735  RET

  736  TA     '('                   721
  740  NTA    ActParList            745  745
  745  T      ')'
  747  SEM        8
  748  JMP      721

  751  TA     '--'                  759
  755  SEM        4
  756  JMP      709

  759  EPSA      11         766
  763  JMP      709

  766  TA     new                   781
  770  NT     Type                   11
  773  T      '['
  775  NT     Expr                   12
  778  T      ']'
  780  RET

  781  T      '('
  783  NT     Expr                   13
  786  T      ')'
  788  RET

-----  ActParList  -------------------------
  789  NT     Expr                    1
  792  TA     ','                   802
  796  NT     Expr                    2
  799  JMP      792

  802  EPS        3
  804  RET

-----  FormParTypeRight  -------------------
  805  TA     '*'                   809
  809  TC     ident                   1
  812  TA     '['                   819
  816  T      ']'
  818  RET

  819  EPS       13
  821  RET

-----  MutDef  -----------------------------
  822  NT     Type                    1
  825  TA     '*'                   829
  829  TC     ident                   2
  832  NTA    Init                  847  847
  837  SEM        4
  838  NTA    Block                 844  844
  843  RET

  844  EPS       15
  846  RET

  847  EPSA      14         854
  851  JMP      837

  854  T      '('
  856  NTA    FormParList           861  861
  861  T      ')'
  863  SEM        6
  864  JMP      838

-----  R o o t  ----------------------------
  867  NT     MiniCpp                 1
  870  T      'end of file'
  872  RET


nonterminals:
============

MiniCpp                   1 del { const, bool, void, int, ';' }
ConstDef                 29     { const }
Init                     58     { '=' }
VarDef                   91     { bool, void, int }
FormParList             134     { bool, void, int }
Type                    190     { bool, void, int }
Block                   203     { '{' }
Stat                    233     { false, true, nullptr, if, while, break, cin, 
                                cout, delete, return, new, '+', '-', '(', '!', 
                                '{', ';', '++', '--', number, ident }
EmptyStat               310     { ';' }
BlockStat               313     { '{' }
ExprStat                317     { false, true, nullptr, new, '+', '-', '(', '!', 
                                '++', '--', number, ident }
IfStat                  323     { if }
WhileStat               348     { while }
BreakStat               362     { break }
InputStat               368     { cin }
OutputStat              379     { cout }
DeleteStat              432     { delete }
ReturnStat              444     { return }
Expr                    454     { false, true, nullptr, new, '+', '-', '(', '!', 
                                '++', '--', number, ident }
OrExpr                  511     { false, true, nullptr, new, '+', '-', '(', '!', 
                                '++', '--', number, ident }
AndExpr                 528     { false, true, nullptr, new, '+', '-', '(', '!', 
                                '++', '--', number, ident }
RelExpr                 545     { false, true, nullptr, new, '+', '-', '(', '!', 
                                '++', '--', number, ident }
SimpleExpr              602     { false, true, nullptr, new, '+', '-', '(', '!', 
                                '++', '--', number, ident }
Term                    640     { false, true, nullptr, new, '(', '!', '++', '--', 
                                number, ident }
NotFact                 673     { false, true, nullptr, new, '(', '!', '++', '--', 
                                number, ident }
Fact                    682     { false, true, nullptr, new, '(', '++', '--', 
                                number, ident }
ActParList              789     { false, true, nullptr, new, '+', '-', '(', '!', 
                                '++', '--', number, ident }
FormParTypeRight        805     { '*', ident }
MutDef                  822     { bool, void, int }


eps look-aheads:
===============

    1   { 'end of file' }
    2   { ',', ';' }
    3   { ')' }
    4   { const, false, true, nullptr, bool, if, else, while, break, cin, cout, 
        delete, return, new, void, int, '+', '-', '(', '!', '{', '}', ';', '++', 
        '--', number, ident }
    5   { ')', ',', ';', '<<', ']' }
    6   { ')', ',', ';', '=', '<<', '+=', '-=', '*=', '/=', '%=', ']' }
    7   { ')', ',', ';', '=', '<<', '+=', '-=', '*=', '/=', '%=', '||', ']' }
    8   { ')', ',', ';', '=', '<<', '+=', '-=', '*=', '/=', '%=', '||', '&&', ']' }
    9   { ')', '<', '>', ',', ';', '=', '>=', '<=', '<<', '+=', '-=', '*=', '/=', 
        '%=', '==', '!=', '||', '&&', ']' }
   10   { '+', '-', ')', '<', '>', ',', ';', '=', '>=', '<=', '<<', '+=', '-=', 
        '*=', '/=', '%=', '==', '!=', '||', '&&', ']' }
   11   { ident }
   12   { '+', '-', '*', '/', ')', '%', '<', '>', ',', ';', '=', '>=', '<=', '<<', 
        '+=', '-=', '*=', '/=', '%=', '==', '!=', '||', '&&', ']' }
   13   { ')', ',' }
   14   { 'end of file', const, bool, void, int, '{', ';' }
   15   { 'end of file', const, bool, void, int, ';' }
