// MiniCppLex.cs                                              HDO, 2006-08-28
// -------------
// Lexical analyzer (finite-state machine interpreter).
// Generated by Coco-2 (SG).
//=====================================|========================================

using System;
using System.Collections;
using System.Collections.Specialized;
using System.IO;

public class MiniCppLex {

  public const String MODULENAME = "MiniCppLex";
  public const int    EOFSPIX    = 1;

  public static TextReader src;

  // --- token information ---
  public static int    token;               // current token
  public static int    tokenLine, tokenCol; // position of current token
  public static String tokenStr;            // token string recognized

  // --- current char. info, for "power users" only ---
  public static char   curCh;               // current input character
  public static int    curLine, curCol;     // position of curCh


  public static void MiniCppLexMethod(Utils.ModuleAction action, out String moduleName) {
  //-----------------------------------|----------------------------------------
    moduleName = MODULENAME;
    switch (action) {
      case Utils.ModuleAction.getModuleName:
        return;
      case Utils.ModuleAction.initModule:
        caseSensitive = true;
        lt            = new LexicalTable();
        tokenStrArr   = new char[256];
        kwHt          = CreateHashtable();
        nHt           = CreateHashtable();
        nl            = new ArrayList();
        break;
      case Utils.ModuleAction.resetModule:
        kwHt.Clear();
        nHt.Clear();
        nl.Clear();
        break;
      case Utils.ModuleAction.cleanupModule:
        lt            = null;
        tokenStrArr   = null;
        kwHt          = null;
        nHt           = null;
        nl            = null;
        break;
    } // switch
  } // MiniCppLexMethod

  private static  Hashtable CreateHashtable() {
    if (caseSensitive)
      return new Hashtable();
    else
      return CollectionsUtil.CreateCaseInsensitiveHashtable();
  } // CreateHashtable


  public static void InitLex() {
  //-----------------------------------|----------------------------------------
    // --- initialize keyword hash table  ---
    kwHt.Clear();
    EnterKeyword(  1, "const");
    EnterKeyword(  2, "false");
    EnterKeyword(  3, "true");
    EnterKeyword(  4, "nullptr");
    EnterKeyword(  5, "bool");
    EnterKeyword(  6, "if");
    EnterKeyword(  7, "else");
    EnterKeyword(  8, "while");
    EnterKeyword(  9, "break");
    EnterKeyword( 10, "cin");
    EnterKeyword( 11, "cout");
    EnterKeyword( 12, "endl");
    EnterKeyword( 13, "delete");
    EnterKeyword( 14, "return");
    EnterKeyword( 15, "new");
    EnterKeyword( 16, "void");
    EnterKeyword( 17, "int");
    // --- initialize name data structures  ---
    nHt.Clear();
    nl.Clear();
    nl.Add("");      // so spix = 0 is the empty string
    nl.Add("!EOF!"); // so EOFSPIX = 1
    // --- (re)set global data ---
    curLineStr  = "";
    curCh       = ' ';
    curLine     = 0;
    curCol      = 2;
    tokenStr    = null;
    token       = 0;
    tokenCol    = 0;
    tokenLine   = 0;
    tokenStrLen = 0;
    pendingEOLs = 0;
    apxLen      = pendingEOLs; // to prevent warning
  } // InitLex

  private static void EnterKeyword(int token, String keyword) {
    kwHt.Add(keyword, token);
  } // EnterKeyword


  // *** start of global LEX declarations from ATG ***
  
  // *** end of global LEX declarations from ATG ***


  public static bool caseSensitive;

  private class LexicalTable {
    public int   header = 5;
    public int[] startTab = {
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0, 32, 29,  0,  0, 33, 23,  0,  2,  3, 34, 35,  6, 36,  0, 37,
         27, 27, 27, 27, 27, 27, 27, 27, 27, 27,  0,  7, 38, 39, 40,  0,
          0, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
         28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 25,  0, 26,  0, 28,
          0, 31, 31, 31, 31, 31, 31, 28, 31, 31, 28, 31, 31, 28, 31, 31,
         31, 28, 31, 31, 31, 31, 31, 31, 28, 28, 28,  4, 21,  5,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
      };
    public Sets.Set256 ignoredChars = new Sets.Set256(
         0x0600, 0x0000, 0x0001
      );
    public Sets.Set256 commentStart = new Sets.Set256(
         0x0000, 0x0000, 0x8000
      );
    public Sets.Set256[] cls = {
        new Sets.Set256( 0x0000, 0x0000, 0x0000, 0x03ff),
        new Sets.Set256( 0x0000, 0x0000, 0x0000, 0x0000, 0xfffe, 0x87ff, 0xfffe, 0x07ff),
        new Sets.Set256( 0xffff, 0xffff, 0xfffb, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
         0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff),
        new Sets.Set256( 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xdb7e, 0x00fd),
        new Sets.Set256( 0x0000, 0x0000, 0x0000, 0x0000, 0xfffe, 0x87ff, 0x2480, 0x0702)
      };
  } // LexicalTable

  private static LexicalTable lt;
  private static Hashtable    kwHt;  // hash table for keywords: string -> token 
  private static Hashtable    nHt;   // hash table for names: string -> spix 
  private static ArrayList    nl;    // name list  for names, spix (as index) -> string

  private static String curLineStr;  // current source line
  private static char[] tokenStrArr; // token string in an array
  private static int    tokenStrLen; // length of token string in tokenStrArr
  private static int    state;       // current automaton state
  private static int    apxLen;      // length of appendix in token string
  private static int    pendingEOLs; // nr of EOLs found in comment

  // --- to save and restore scanner state ---
  private static char   savedCh;
  private static int    savedCol, savedLine;

  private static void SaveScannerState() {
    savedCh      = curCh;
    savedCol     = curCol;
    savedLine    = curLine;
  } // SaveScannerState

  private static void RestoreScannerState() {
    tokenStrLen -= apxLen;
    apxLen       = 0;
    curCh        = savedCh;
    curCol       = savedCol;
    curLine      = savedLine;
  } // RestoreScannerState


  public static void NextCh() {
  //-----------------------------------|----------------------------------------
    for (;;) {
      
      if (curCol < curLineStr.Length) {         // within line
        curCol++;
        curCh = curLineStr[curCol - 1];
        return;
      } else if (curCol == curLineStr.Length) { // end of line
        curCol++;
        curCh = Utils.LF; // to separate lines
        return;
      } else { // curCol > curLineStr.Length
        curLineStr = src.ReadLine();
        curLine++;
        curCol = 0;
        if (curLineStr == null) {               // end of file
          curLineStr = "";
          curCh = Utils.EF;
          return;
        } // if
      } // else
    } // for
  } // NextCh


  private static void CommentErr() {
    Errors.LexError(curLine, curCol, "end of file in comment");
  } // CommentErr

  private static bool Comment() {
    
    
    SaveScannerState();
    // --- from '/' '/' to Utils.LF ---
    if (curCh == '/') {
      NextCh();
      if (curCh == '/') {
        NextCh();
        for (;;)
          switch (curCh) {
            case Utils.LF:
              NextCh();
              return true;
            case Utils.EF:
              CommentErr();
              return true;
            default:
              NextCh();
              break;
          } // switch
      } else
        RestoreScannerState();
    } // if
    // --- from '/' '*' to '*' '/' ---
    if (curCh == '/') {
      NextCh();
      if (curCh == '*') {
        NextCh();
        for (;;)
          switch (curCh) {
            case '*':
              NextCh();
              if (curCh == '/') {
                NextCh();
                return true;
              } // if
              break;
            case Utils.EF:
              CommentErr();
              return true;
            default:
              NextCh();
              break;
          } // switch
      } else
        RestoreScannerState();
    } // if
    return false;
  } // Comment

  private static void HandleLexErr() {
    Errors.LexError(curLine, curCol, 
                    "invalid character '{0}' (hex {1:X})", curCh, (int)curCh);
    if (apxLen > 0)
      RestoreScannerState();
  } // HandleLexErr


  public static void GetToken() {
  //-----------------------------------|----------------------------------------
    token = -1;
    tokenStr = null;
    do {
      // --- skip ignored chars and comments ---
      for (;;) {
        while (Sets.member(curCh, lt.ignoredChars))
          NextCh();
        if (!Sets.member(curCh, lt.commentStart))
          break;
        if (!Comment())
          break;
      } // for
      // --- scan for next token ---
      tokenLine   = curLine;
      tokenCol    = curCol;
      tokenStrLen = 0;
      apxLen      = 0;
      state = (curCh == Utils.EF) ? 1 : lt.startTab[curCh];
      for (;;) {
        tokenStrArr[tokenStrLen++]= curCh;
        NextCh();
        switch (state) {
          case 0:
            Errors.LexError(tokenLine, tokenCol, "invalid token start");
            break;
          case 1:
            token = 0;
            tokenStrLen = 0;
            break;                      // EOF recognized
          case 2:
            token = 22;
            break;                      // '(' recognized
          case 3:
            token = 23;
            break;                      // ')' recognized
          case 4:
            token = 28;
            break;                      // '{' recognized
          case 5:
            token = 29;
            break;                      // '}' recognized
          case 6:
            token = 30;
            break;                      // ',' recognized
          case 7:
            token = 31;
            break;                      // ';' recognized
          case 8:
            token = 33;
            break;                      // '>=' recognized
          case 9:
            token = 34;
            break;                      // '<=' recognized
          case 10:
            token = 35;
            break;                      // '>>' recognized
          case 11:
            token = 36;
            break;                      // '<<' recognized
          case 12:
            token = 37;
            break;                      // '+=' recognized
          case 13:
            token = 38;
            break;                      // '-=' recognized
          case 14:
            token = 39;
            break;                      // '*=' recognized
          case 15:
            token = 40;
            break;                      // '/=' recognized
          case 16:
            token = 41;
            break;                      // '%=' recognized
          case 17:
            token = 42;
            break;                      // '==' recognized
          case 18:
            token = 43;
            break;                      // '!=' recognized
          case 19:
            token = 44;
            break;                      // '++' recognized
          case 20:
            token = 45;
            break;                      // '--' recognized
          case 21:
            if (curCh == '|') {
              state = 22;
              continue;
            } // if
            else {
              HandleLexErr();
              break;
            } // else
          case 22:
            token = 46;
            break;                      // '||' recognized
          case 23:
            if (curCh == '&') {
              state = 24;
              continue;
            } // if
            else {
              HandleLexErr();
              break;
            } // else
          case 24:
            token = 47;
            break;                      // '&&' recognized
          case 25:
            token = 48;
            break;                      // '[' recognized
          case 26:
            token = 49;
            break;                      // ']' recognized
          case 27:
            if (Sets.member(curCh, lt.cls[0])) {
              state = 27;
              continue;
            } // if
            else {
              token = 50;
              break;                    // number recognized
            } // else
          case 28:
            if (Sets.member(curCh, lt.cls[0])) {
              state = 28;
              continue;
            } // if
            else if (Sets.member(curCh, lt.cls[1])) {
              state = 28;
              continue;
            } // if
            else {
              token = KeywordCheck();
              if (token >= 0)
                break;                  // keyword recognized
              token = 51;
              break;                    // ident recognized
            } // else
          case 29:
            if (Sets.member(curCh, lt.cls[2])) {
              state = 29;
              continue;
            } // if
            else if (curCh == '\"') {
              state = 30;
              continue;
            } // if
            else {
              HandleLexErr();
              break;
            } // else
          case 30:
            token = 52;
            break;                      // string recognized
          case 31:
            if (Sets.member(curCh, lt.cls[0])) {
              state = 28;
              continue;
            } // if
            else if (Sets.member(curCh, lt.cls[3])) {
              state = 31;
              continue;
            } // if
            else if (Sets.member(curCh, lt.cls[4])) {
              state = 28;
              continue;
            } // if
            else {
              token = KeywordCheck();
              if (token >= 0)
                break;                  // keyword recognized
              token = 51;
              break;                    // ident recognized
            } // else
          case 32:
            if (curCh == '=') {
              state = 18;
              continue;
            } // if
            else {
              token = 27;
              break;                    // '!' recognized
            } // else
          case 33:
            if (curCh == '=') {
              state = 16;
              continue;
            } // if
            else {
              token = 24;
              break;                    // '%' recognized
            } // else
          case 34:
            if (curCh == '=') {
              state = 14;
              continue;
            } // if
            else {
              token = 20;
              break;                    // '*' recognized
            } // else
          case 35:
            if (curCh == '+') {
              state = 19;
              continue;
            } // if
            else if (curCh == '=') {
              state = 12;
              continue;
            } // if
            else {
              token = 18;
              break;                    // '+' recognized
            } // else
          case 36:
            if (curCh == '-') {
              state = 20;
              continue;
            } // if
            else if (curCh == '=') {
              state = 13;
              continue;
            } // if
            else {
              token = 19;
              break;                    // '-' recognized
            } // else
          case 37:
            if (curCh == '=') {
              state = 15;
              continue;
            } // if
            else {
              token = 21;
              break;                    // '/' recognized
            } // else
          case 38:
            if (curCh == '<') {
              state = 11;
              continue;
            } // if
            else if (curCh == '=') {
              state = 9;
              continue;
            } // if
            else {
              token = 25;
              break;                    // '<' recognized
            } // else
          case 39:
            if (curCh == '=') {
              state = 17;
              continue;
            } // if
            else {
              token = 32;
              break;                    // '=' recognized
            } // else
          case 40:
            if (curCh == '=') {
              state = 8;
              continue;
            } // if
            else if (curCh == '>') {
              state = 10;
              continue;
            } // if
            else {
              token = 26;
              break;                    // '>' recognized
            } // else
        } // switch
        break;
      } // for
    } while (token < 0);
    if (tokenStr == null)
      tokenStr = new String(tokenStrArr, 0, tokenStrLen);
  } // GetToken

  private static int KeywordCheck() {
    tokenStr = new String(tokenStrArr, 0, tokenStrLen - apxLen);
    Object token = kwHt[tokenStr];
    return (token == null) ? -1 : (int)token;
  } // KeywordCheck


  public static int Hash(String s) {
  //-----------------------------------|----------------------------------------
    Object spix = nHt[s];
    if (spix == null) {
      if (caseSensitive)
        nl.Add(s);
      else
        nl.Add(s.ToUpper());
      spix   = nl.Count - 1;
      nHt[s] = spix;
    } // if
    return (int)spix;
  } // Hash
  
  
  public static String HashedStr(int spix) {
  //-----------------------------------|----------------------------------------
    return (String)nl[spix];
  } // HashedStr


  public static void GETnumberAttr(out int n) {
    n = Convert.ToInt32(tokenStr);
  } // GETnumberAttr
  
  public static void GETidentAttr(out string idStr) {
    idStr = tokenStr;
  } // GETidentAttr
  
  public static void GETstringAttr(out string str) {
    str = tokenStr;
  } // GETstringAttr

} // MiniCppLex

// End of MiniCppLex.cs
//=====================================|========================================